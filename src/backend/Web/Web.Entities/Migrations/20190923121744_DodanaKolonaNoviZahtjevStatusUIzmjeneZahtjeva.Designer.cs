// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Entities;

namespace Web.Entities.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190923121744_DodanaKolonaNoviZahtjevStatusUIzmjeneZahtjeva")]
    partial class DodanaKolonaNoviZahtjevStatusUIzmjeneZahtjeva
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Web.Entities.Models.Base.LogAkcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Akcija");

                    b.Property<DateTime>("DatumAkcije");

                    b.Property<int>("Kategorija");

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(64);

                    b.Property<int>("Level");

                    b.Property<string>("Opis");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickoIme");

                    b.ToTable("LogAkcije");
                });

            modelBuilder.Entity("Web.Entities.Models.Base.LogEntitet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumAkcije");

                    b.Property<int>("Entitet");

                    b.Property<int>("EntitetId");

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(64);

                    b.Property<string>("Vrijednost");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickoIme");

                    b.ToTable("LogEntiteti");
                });

            modelBuilder.Entity("Web.Entities.Models.Base.Notifikacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naslov");

                    b.Property<string>("Poruka");

                    b.Property<int>("ProjekatId");

                    b.HasKey("Id");

                    b.HasIndex("ProjekatId");

                    b.ToTable("Notifikacije");
                });

            modelBuilder.Entity("Web.Entities.Models.Base.Postavke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutorskaPravaKarte")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("NaslovSistema")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("TrajanjeSesije");

                    b.Property<string>("UrlKarte")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Postavke");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.Korisnik", b =>
                {
                    b.Property<string>("KorisnickoIme")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<string>("BrojMobitela");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailVerifikovan");

                    b.Property<int?>("Jezik");

                    b.Property<string>("ModifiedBy");

                    b.Property<bool>("Onemogucen");

                    b.Property<int?>("PolId");

                    b.Property<string>("PunoIme")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<byte[]>("Tajna");

                    b.Property<int>("UlogaDisc");

                    b.HasKey("KorisnickoIme");

                    b.HasIndex("KorisnickoIme")
                        .IsUnique();

                    b.HasIndex("PolId");

                    b.HasIndex("UlogaDisc");

                    b.ToTable("Korisnici");

                    b.HasDiscriminator<int>("UlogaDisc").HasValue(0);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikKategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KorisnickoIme");

                    b.Property<int?>("KorisnikProjekatId");

                    b.Property<int>("ZahtjevKategorijaId");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickoIme");

                    b.HasIndex("KorisnikProjekatId");

                    b.HasIndex("ZahtjevKategorijaId");

                    b.ToTable("KorisnikKategorije");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikNotifikacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KorisnickoIme");

                    b.Property<int>("NotifikacijaId");

                    b.Property<bool>("Otvorena");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickoIme");

                    b.HasIndex("NotifikacijaId");

                    b.ToTable("KorisnikNotifikacije");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikProjekat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnikUlogaId");

                    b.Property<int>("ProjekatId");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikUlogaId");

                    b.HasIndex("ProjekatId");

                    b.ToTable("KorisnikProjekti");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikUloga", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(64);

                    b.Property<int>("UlogaId");

                    b.HasKey("KorisnikUlogaId");

                    b.HasIndex("KorisnickoIme");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisnikUloge");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikUlogaDodatnaInformacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("KorisnikTipDodatneInformacijeId");

                    b.Property<int>("KorisnikUlogaId");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Vrijednost");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikTipDodatneInformacijeId");

                    b.HasIndex("KorisnikUlogaId");

                    b.ToTable("KorisnikUlogaDodatneInformacije");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.Modul", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Naziv")
                        .HasMaxLength(200);

                    b.Property<string>("Opis")
                        .HasMaxLength(200);

                    b.Property<string>("Sifra")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("Sifra")
                        .IsUnique()
                        .HasFilter("[Sifra] IS NOT NULL");

                    b.ToTable("Moduli");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoAkcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Naziv")
                        .HasMaxLength(200);

                    b.Property<string>("Opis")
                        .HasMaxLength(200);

                    b.Property<int>("PravoObjektId");

                    b.Property<string>("Sifra")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PravoObjektId");

                    b.HasIndex("Sifra")
                        .IsUnique()
                        .HasFilter("[Sifra] IS NOT NULL");

                    b.ToTable("PravoAkcije");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoAkcijaUloga", b =>
                {
                    b.Property<int>("PravoAkcijaId");

                    b.Property<int>("UlogaId");

                    b.HasKey("PravoAkcijaId", "UlogaId");

                    b.HasIndex("UlogaId");

                    b.ToTable("PravoAkcijaUloge");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoGrupa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Naziv")
                        .HasMaxLength(200);

                    b.Property<string>("Opis")
                        .HasMaxLength(200);

                    b.Property<string>("Sifra")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("Sifra")
                        .IsUnique()
                        .HasFilter("[Sifra] IS NOT NULL");

                    b.ToTable("PravoGrupe");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoObjekt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("ModulId");

                    b.Property<string>("Naziv")
                        .HasMaxLength(200);

                    b.Property<int>("PravoGrupaId");

                    b.Property<string>("Sifra")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("ModulId");

                    b.HasIndex("PravoGrupaId");

                    b.HasIndex("Sifra")
                        .IsUnique()
                        .HasFilter("[Sifra] IS NOT NULL");

                    b.ToTable("PravoObjekti");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoUpravljanjaKorisnikom", b =>
                {
                    b.Property<int>("UlogaUpraviteljaId");

                    b.Property<int>("UlogaUpravljanogId");

                    b.HasKey("UlogaUpraviteljaId", "UlogaUpravljanogId");

                    b.HasIndex("UlogaUpravljanogId");

                    b.ToTable("PravaUpravljanjaKorisnicima");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PrebacivanjePrava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DoKorisnickogImena");

                    b.Property<string>("OdKorisnickogImena");

                    b.Property<DateTime>("VrijemeDo");

                    b.Property<DateTime>("VrijemeOd");

                    b.HasKey("Id");

                    b.HasIndex("DoKorisnickogImena");

                    b.HasIndex("OdKorisnickogImena");

                    b.ToTable("PrebacivanjaPrava");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DatumIsteka");

                    b.Property<DateTime>("DatumKreiranja");

                    b.Property<DateTime>("DatumPosljednjeAkcije");

                    b.Property<string>("PosljednjiIp")
                        .HasMaxLength(256);

                    b.Property<string>("PosljednjiKlijent")
                        .HasMaxLength(256);

                    b.Property<int>("Tip");

                    b.Property<int>("UlogaId");

                    b.Property<string>("VlasnikKorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("UlogaId");

                    b.HasIndex("VlasnikKorisnickoIme");

                    b.ToTable("Tokeni");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.UlogaTipDodatneInformacije", b =>
                {
                    b.Property<int>("UlogaId");

                    b.Property<int>("KorisnikTipDodatneInformacijeId");

                    b.HasKey("UlogaId", "KorisnikTipDodatneInformacijeId");

                    b.HasIndex("KorisnikTipDodatneInformacijeId");

                    b.ToTable("UlogaTipoviDodatneInformacije");
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.DioProjekta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv");

                    b.Property<int>("ProjekatId");

                    b.HasKey("Id");

                    b.HasIndex("ProjekatId");

                    b.ToTable("DijeloviProjekta");
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.Projekat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Naziv");

                    b.Property<string>("Opis");

                    b.Property<int>("ProjekatKonfiguracijaId");

                    b.HasKey("Id");

                    b.HasIndex("ProjekatKonfiguracijaId");

                    b.ToTable("Projekti");
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ProjekatKonfiguracija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RadniDani");

                    b.Property<TimeSpan>("RadnoVrijemeDo");

                    b.Property<TimeSpan>("RadnoVrijemeOd");

                    b.HasKey("Id");

                    b.ToTable("ProjekatKonfiguracija");
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevKategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DioProjektaId");

                    b.Property<string>("Naziv");

                    b.HasKey("Id");

                    b.HasIndex("DioProjektaId");

                    b.ToTable("ZahtjevKategorije");
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevPrioritet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Default");

                    b.Property<string>("Naziv");

                    b.Property<int>("Poredak");

                    b.Property<int>("ProjekatId");

                    b.HasKey("Id");

                    b.HasIndex("ProjekatId");

                    b.ToTable("ZahtjevPrioriteti");
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Default");

                    b.Property<string>("Naziv");

                    b.Property<int>("Oznaka");

                    b.Property<int>("ProjekatId");

                    b.HasKey("Id");

                    b.HasIndex("ProjekatId");

                    b.ToTable("ZahtjevStatusi");
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Default");

                    b.Property<string>("Naziv");

                    b.Property<int>("ProjekatId");

                    b.HasKey("Id");

                    b.HasIndex("ProjekatId");

                    b.ToTable("ZahtjevTipovi");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.FrontendModul", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Naziv");

                    b.Property<bool>("Onemogucen");

                    b.Property<string>("Sifra");

                    b.HasKey("Id");

                    b.ToTable("FrontendModuli");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.KorisnikTipDodatneInformacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("Naziv")
                        .HasMaxLength(200);

                    b.Property<bool>("Onemogucen");

                    b.Property<string>("Opis")
                        .HasMaxLength(200);

                    b.Property<int>("Poredak");

                    b.Property<string>("Sifra")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("KorisnikTipoviDodatneInformacije");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.LogKategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("Poredak");

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("VrijednostUAplikaciji");

                    b.HasKey("Id");

                    b.ToTable("LogKategorije");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.LogLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("Poredak");

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("VrijednostUAplikaciji");

                    b.HasKey("Id");

                    b.ToTable("LogLeveli");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.Pol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("Poredak");

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("VrijednostUAplikaciji");

                    b.HasKey("Id");

                    b.ToTable("Polovi");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.Prevod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Jezik");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Polje");

                    b.Property<string>("PrevodTekst");

                    b.Property<int>("RedId");

                    b.Property<string>("Tabela");

                    b.HasKey("Id");

                    b.ToTable("Prevodi");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<int>("FrontendModulId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("Poredak");

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("VrijednostUAplikaciji");

                    b.HasKey("Id");

                    b.HasIndex("FrontendModulId");

                    b.ToTable("Uloge");
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.VrstaLogAkcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("Poredak");

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("VrijednostUAplikaciji");

                    b.HasKey("Id");

                    b.ToTable("VrsteLogAkcija");
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.Dokument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Naziv");

                    b.Property<string>("Putanja");

                    b.HasKey("Id");

                    b.ToTable("Dokumenti");
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.IzmjenaZahtjeva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KorisnickoIme");

                    b.Property<int>("NoviZahtjevStatusId");

                    b.Property<DateTime>("Vrijeme");

                    b.Property<int>("ZahtjevId");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickoIme");

                    b.HasIndex("NoviZahtjevStatusId");

                    b.HasIndex("ZahtjevId");

                    b.ToTable("IzmjeneZahtjeva");
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.PrilogKomentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DokumentId");

                    b.Property<int>("ZahtjevKomentarId");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("ZahtjevKomentarId");

                    b.ToTable("PriloziKomentar");
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.PrilogZahtjeva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DokumentId");

                    b.Property<int>("ZahtjevId");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("ZahtjevId");

                    b.ToTable("PriloziZahtjeva");
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.Zahtjev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("DodijeljeniKorisnikIme");

                    b.Property<DateTime>("EstimiranoVrijeme");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Naziv");

                    b.Property<string>("Opis");

                    b.Property<DateTime>("PotrošenoVrijeme");

                    b.Property<int>("ProjekatId");

                    b.Property<int>("ZahtjevKategorijaId");

                    b.Property<int>("ZahtjevPrioritetId");

                    b.Property<int>("ZahtjevStatusId");

                    b.Property<int>("ZahtjevTipId");

                    b.HasKey("Id");

                    b.HasIndex("DodijeljeniKorisnikIme");

                    b.HasIndex("ProjekatId");

                    b.HasIndex("ZahtjevKategorijaId");

                    b.HasIndex("ZahtjevPrioritetId");

                    b.HasIndex("ZahtjevStatusId");

                    b.HasIndex("ZahtjevTipId");

                    b.ToTable("Zahtjevi");
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.ZahtjevKomentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DatumIzmjene");

                    b.Property<DateTime?>("DatumKreiranja");

                    b.Property<string>("Komentar");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("ZahtjevId");

                    b.HasKey("Id");

                    b.HasIndex("ZahtjevId");

                    b.ToTable("ZahtjevKomentari");
                });

            modelBuilder.Entity("Web.Entities.Models.Base.LogAkcija", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "Korisnik")
                        .WithMany("LogAkcije")
                        .HasForeignKey("KorisnickoIme");
                });

            modelBuilder.Entity("Web.Entities.Models.Base.LogEntitet", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnickoIme");
                });

            modelBuilder.Entity("Web.Entities.Models.Base.Notifikacija", b =>
                {
                    b.HasOne("Web.Entities.Models.Projekat.Projekat", "Projekat")
                        .WithMany("Notifikacije")
                        .HasForeignKey("ProjekatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.Korisnik", b =>
                {
                    b.HasOne("Web.Entities.Models.Sifarnik.Pol", "Pol")
                        .WithMany()
                        .HasForeignKey("PolId");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikKategorija", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnickoIme");

                    b.HasOne("Web.Entities.Models.Korisnik.KorisnikProjekat")
                        .WithMany("KorisnikKategorije")
                        .HasForeignKey("KorisnikProjekatId");

                    b.HasOne("Web.Entities.Models.Projekat.ZahtjevKategorija", "ZahtjevKategorija")
                        .WithMany("KorisnikKategorije")
                        .HasForeignKey("ZahtjevKategorijaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikNotifikacija", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnickoIme");

                    b.HasOne("Web.Entities.Models.Base.Notifikacija", "Notifikacija")
                        .WithMany()
                        .HasForeignKey("NotifikacijaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikProjekat", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.KorisnikUloga", "KorisnikUloga")
                        .WithMany("KorisnikProjekti")
                        .HasForeignKey("KorisnikUlogaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Projekat.Projekat", "Projekat")
                        .WithMany("Korisnici")
                        .HasForeignKey("ProjekatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikUloga", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "Korisnik")
                        .WithMany("KorisnikUloge")
                        .HasForeignKey("KorisnickoIme");

                    b.HasOne("Web.Entities.Models.Sifarnik.Uloga", "Uloga")
                        .WithMany("KorisnikUloge")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.KorisnikUlogaDodatnaInformacija", b =>
                {
                    b.HasOne("Web.Entities.Models.Sifarnik.KorisnikTipDodatneInformacije", "KorisnikTipDodatneInformacije")
                        .WithMany()
                        .HasForeignKey("KorisnikTipDodatneInformacijeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Korisnik.KorisnikUloga", "KorisnikUloga")
                        .WithMany("KorisnikUlogaDodatnaInformacija")
                        .HasForeignKey("KorisnikUlogaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoAkcija", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.PravoObjekt", "PravoObjekt")
                        .WithMany("PravoAkcije")
                        .HasForeignKey("PravoObjektId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoAkcijaUloga", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.PravoAkcija", "PravoAkcija")
                        .WithMany("PravoAkcijaUloge")
                        .HasForeignKey("PravoAkcijaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Sifarnik.Uloga", "Uloga")
                        .WithMany("PravoAkcijaUloge")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoObjekt", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Modul", "Modul")
                        .WithMany("PravoObjekti")
                        .HasForeignKey("ModulId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Korisnik.PravoGrupa", "PravoGrupa")
                        .WithMany("PravoObjekti")
                        .HasForeignKey("PravoGrupaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PravoUpravljanjaKorisnikom", b =>
                {
                    b.HasOne("Web.Entities.Models.Sifarnik.Uloga", "UlogaUpravitelja")
                        .WithMany("PravaUpravljanja")
                        .HasForeignKey("UlogaUpraviteljaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Sifarnik.Uloga", "UlogaUpravljanog")
                        .WithMany("PravaUpravljanosti")
                        .HasForeignKey("UlogaUpravljanogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.PrebacivanjePrava", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "DoKorisnika")
                        .WithMany()
                        .HasForeignKey("DoKorisnickogImena");

                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "OdKorisnika")
                        .WithMany()
                        .HasForeignKey("OdKorisnickogImena");
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.Token", b =>
                {
                    b.HasOne("Web.Entities.Models.Sifarnik.Uloga", "Uloga")
                        .WithMany("Tokeni")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "Vlasnik")
                        .WithMany()
                        .HasForeignKey("VlasnikKorisnickoIme")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Korisnik.UlogaTipDodatneInformacije", b =>
                {
                    b.HasOne("Web.Entities.Models.Sifarnik.KorisnikTipDodatneInformacije", "KorisnikTipDodatneInformacije")
                        .WithMany("TipoviDodatneInformacije")
                        .HasForeignKey("KorisnikTipDodatneInformacijeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Sifarnik.Uloga", "Uloga")
                        .WithMany("TipoviDodatneInformacije")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.DioProjekta", b =>
                {
                    b.HasOne("Web.Entities.Models.Projekat.Projekat", "Projekat")
                        .WithMany("DijeloviProjekta")
                        .HasForeignKey("ProjekatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.Projekat", b =>
                {
                    b.HasOne("Web.Entities.Models.Projekat.ProjekatKonfiguracija", "ProjekatKonfiguracija")
                        .WithMany()
                        .HasForeignKey("ProjekatKonfiguracijaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevKategorija", b =>
                {
                    b.HasOne("Web.Entities.Models.Projekat.DioProjekta", "DioProjekta")
                        .WithMany("KategorijeZahtjeva")
                        .HasForeignKey("DioProjektaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevPrioritet", b =>
                {
                    b.HasOne("Web.Entities.Models.Projekat.Projekat", "Projekat")
                        .WithMany("PrioritetiZahtjeva")
                        .HasForeignKey("ProjekatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevStatus", b =>
                {
                    b.HasOne("Web.Entities.Models.Projekat.Projekat", "Projekat")
                        .WithMany("StatusiZahtjeva")
                        .HasForeignKey("ProjekatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Projekat.ZahtjevTip", b =>
                {
                    b.HasOne("Web.Entities.Models.Projekat.Projekat", "Projekat")
                        .WithMany("TipoviZahtjeva")
                        .HasForeignKey("ProjekatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Sifarnik.Uloga", b =>
                {
                    b.HasOne("Web.Entities.Models.Sifarnik.FrontendModul", "FrontendModul")
                        .WithMany("Uloge")
                        .HasForeignKey("FrontendModulId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.IzmjenaZahtjeva", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnickoIme");

                    b.HasOne("Web.Entities.Models.Projekat.ZahtjevStatus", "NoviZahtjevStatus")
                        .WithMany()
                        .HasForeignKey("NoviZahtjevStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Zahtjev.Zahtjev", "Zahtjev")
                        .WithMany("IzmjeneZahtjeva")
                        .HasForeignKey("ZahtjevId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.PrilogKomentar", b =>
                {
                    b.HasOne("Web.Entities.Models.Zahtjev.Dokument", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Zahtjev.ZahtjevKomentar", "ZahtjevKomentar")
                        .WithMany()
                        .HasForeignKey("ZahtjevKomentarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.PrilogZahtjeva", b =>
                {
                    b.HasOne("Web.Entities.Models.Zahtjev.Dokument", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Zahtjev.Zahtjev", "Zahtjev")
                        .WithMany("PriloziZahtjeva")
                        .HasForeignKey("ZahtjevId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.Zahtjev", b =>
                {
                    b.HasOne("Web.Entities.Models.Korisnik.Korisnik", "DodijeljeniKorisnik")
                        .WithMany()
                        .HasForeignKey("DodijeljeniKorisnikIme");

                    b.HasOne("Web.Entities.Models.Projekat.Projekat", "Projekat")
                        .WithMany("Zahtjevi")
                        .HasForeignKey("ProjekatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Projekat.ZahtjevKategorija", "ZahtjevKategorija")
                        .WithMany("Zahtjevi")
                        .HasForeignKey("ZahtjevKategorijaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Projekat.ZahtjevPrioritet", "ZahtjevPrioritet")
                        .WithMany()
                        .HasForeignKey("ZahtjevPrioritetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Projekat.ZahtjevStatus", "ZahtjevStatus")
                        .WithMany()
                        .HasForeignKey("ZahtjevStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Entities.Models.Projekat.ZahtjevTip", "ZahtjevTip")
                        .WithMany()
                        .HasForeignKey("ZahtjevTipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Entities.Models.Zahtjev.ZahtjevKomentar", b =>
                {
                    b.HasOne("Web.Entities.Models.Zahtjev.Zahtjev", "Zahtjev")
                        .WithMany("Komentari")
                        .HasForeignKey("ZahtjevId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
